package servlet;

import servlet.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Thu Jun 21 13:30:54 JST 2018 by nurulfirdaus
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://purl.org/NET/c4dm/event.owl#Event
     */

    {
        javaMapping.add("http://purl.org/NET/c4dm/event.owl#Event", Event.class, DefaultEvent.class);
    }

    /**
     * Creates an instance of type Event.  Modifies the underlying ontology.
     */
    public Event createEvent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EVENT, DefaultEvent.class);
    }

    /**
     * Gets an instance of type Event with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Event getEvent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EVENT, DefaultEvent.class);
    }

    /**
     * Gets all instances of Event from the ontology.
     */
    public Collection<? extends Event> getAllEventInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EVENT, DefaultEvent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#AgricultureLand
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#AgricultureLand", AgricultureLand.class, DefaultAgricultureLand.class);
    }

    /**
     * Creates an instance of type AgricultureLand.  Modifies the underlying ontology.
     */
    public AgricultureLand createAgricultureLand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGRICULTURELAND, DefaultAgricultureLand.class);
    }

    /**
     * Gets an instance of type AgricultureLand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AgricultureLand getAgricultureLand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGRICULTURELAND, DefaultAgricultureLand.class);
    }

    /**
     * Gets all instances of AgricultureLand from the ontology.
     */
    public Collection<? extends AgricultureLand> getAllAgricultureLandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGRICULTURELAND, DefaultAgricultureLand.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Area
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Area", Area.class, DefaultArea.class);
    }

    /**
     * Creates an instance of type Area.  Modifies the underlying ontology.
     */
    public Area createArea(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AREA, DefaultArea.class);
    }

    /**
     * Gets an instance of type Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Area getArea(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AREA, DefaultArea.class);
    }

    /**
     * Gets all instances of Area from the ontology.
     */
    public Collection<? extends Area> getAllAreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AREA, DefaultArea.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_II_exclusively_low-rise_residential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_II_exclusively_low-rise_residential_zone", Category_II_exclusively_low_rise_residential_zone.class, DefaultCategory_II_exclusively_low_rise_residential_zone.class);
    }

    /**
     * Creates an instance of type Category_II_exclusively_low_rise_residential_zone.  Modifies the underlying ontology.
     */
    public Category_II_exclusively_low_rise_residential_zone createCategory_II_exclusively_low_rise_residential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_II_EXCLUSIVELY_LOW_RISE_RESIDENTIAL_ZONE, DefaultCategory_II_exclusively_low_rise_residential_zone.class);
    }

    /**
     * Gets an instance of type Category_II_exclusively_low_rise_residential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Category_II_exclusively_low_rise_residential_zone getCategory_II_exclusively_low_rise_residential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_II_EXCLUSIVELY_LOW_RISE_RESIDENTIAL_ZONE, DefaultCategory_II_exclusively_low_rise_residential_zone.class);
    }

    /**
     * Gets all instances of Category_II_exclusively_low_rise_residential_zone from the ontology.
     */
    public Collection<? extends Category_II_exclusively_low_rise_residential_zone> getAllCategory_II_exclusively_low_rise_residential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATEGORY_II_EXCLUSIVELY_LOW_RISE_RESIDENTIAL_ZONE, DefaultCategory_II_exclusively_low_rise_residential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_II_mid_high-rise_oriented_residential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_II_mid_high-rise_oriented_residential_zone", Category_II_mid_high_rise_oriented_residential_zone.class, DefaultCategory_II_mid_high_rise_oriented_residential_zone.class);
    }

    /**
     * Creates an instance of type Category_II_mid_high_rise_oriented_residential_zone.  Modifies the underlying ontology.
     */
    public Category_II_mid_high_rise_oriented_residential_zone createCategory_II_mid_high_rise_oriented_residential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_II_MID_HIGH_RISE_ORIENTED_RESIDENTIAL_ZONE, DefaultCategory_II_mid_high_rise_oriented_residential_zone.class);
    }

    /**
     * Gets an instance of type Category_II_mid_high_rise_oriented_residential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Category_II_mid_high_rise_oriented_residential_zone getCategory_II_mid_high_rise_oriented_residential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_II_MID_HIGH_RISE_ORIENTED_RESIDENTIAL_ZONE, DefaultCategory_II_mid_high_rise_oriented_residential_zone.class);
    }

    /**
     * Gets all instances of Category_II_mid_high_rise_oriented_residential_zone from the ontology.
     */
    public Collection<? extends Category_II_mid_high_rise_oriented_residential_zone> getAllCategory_II_mid_high_rise_oriented_residential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATEGORY_II_MID_HIGH_RISE_ORIENTED_RESIDENTIAL_ZONE, DefaultCategory_II_mid_high_rise_oriented_residential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_II_residential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_II_residential_zone", Category_II_residential_zone.class, DefaultCategory_II_residential_zone.class);
    }

    /**
     * Creates an instance of type Category_II_residential_zone.  Modifies the underlying ontology.
     */
    public Category_II_residential_zone createCategory_II_residential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_II_RESIDENTIAL_ZONE, DefaultCategory_II_residential_zone.class);
    }

    /**
     * Gets an instance of type Category_II_residential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Category_II_residential_zone getCategory_II_residential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_II_RESIDENTIAL_ZONE, DefaultCategory_II_residential_zone.class);
    }

    /**
     * Gets all instances of Category_II_residential_zone from the ontology.
     */
    public Collection<? extends Category_II_residential_zone> getAllCategory_II_residential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATEGORY_II_RESIDENTIAL_ZONE, DefaultCategory_II_residential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_I_exclusively_low-rise_residential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_I_exclusively_low-rise_residential_zone", Category_I_exclusively_low_rise_residential_zone.class, DefaultCategory_I_exclusively_low_rise_residential_zone.class);
    }

    /**
     * Creates an instance of type Category_I_exclusively_low_rise_residential_zone.  Modifies the underlying ontology.
     */
    public Category_I_exclusively_low_rise_residential_zone createCategory_I_exclusively_low_rise_residential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_I_EXCLUSIVELY_LOW_RISE_RESIDENTIAL_ZONE, DefaultCategory_I_exclusively_low_rise_residential_zone.class);
    }

    /**
     * Gets an instance of type Category_I_exclusively_low_rise_residential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Category_I_exclusively_low_rise_residential_zone getCategory_I_exclusively_low_rise_residential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_I_EXCLUSIVELY_LOW_RISE_RESIDENTIAL_ZONE, DefaultCategory_I_exclusively_low_rise_residential_zone.class);
    }

    /**
     * Gets all instances of Category_I_exclusively_low_rise_residential_zone from the ontology.
     */
    public Collection<? extends Category_I_exclusively_low_rise_residential_zone> getAllCategory_I_exclusively_low_rise_residential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATEGORY_I_EXCLUSIVELY_LOW_RISE_RESIDENTIAL_ZONE, DefaultCategory_I_exclusively_low_rise_residential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_I_mid_high-rise_oriented_residential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_I_mid_high-rise_oriented_residential_zone", Category_I_mid_high_rise_oriented_residential_zone.class, DefaultCategory_I_mid_high_rise_oriented_residential_zone.class);
    }

    /**
     * Creates an instance of type Category_I_mid_high_rise_oriented_residential_zone.  Modifies the underlying ontology.
     */
    public Category_I_mid_high_rise_oriented_residential_zone createCategory_I_mid_high_rise_oriented_residential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_I_MID_HIGH_RISE_ORIENTED_RESIDENTIAL_ZONE, DefaultCategory_I_mid_high_rise_oriented_residential_zone.class);
    }

    /**
     * Gets an instance of type Category_I_mid_high_rise_oriented_residential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Category_I_mid_high_rise_oriented_residential_zone getCategory_I_mid_high_rise_oriented_residential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_I_MID_HIGH_RISE_ORIENTED_RESIDENTIAL_ZONE, DefaultCategory_I_mid_high_rise_oriented_residential_zone.class);
    }

    /**
     * Gets all instances of Category_I_mid_high_rise_oriented_residential_zone from the ontology.
     */
    public Collection<? extends Category_I_mid_high_rise_oriented_residential_zone> getAllCategory_I_mid_high_rise_oriented_residential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATEGORY_I_MID_HIGH_RISE_ORIENTED_RESIDENTIAL_ZONE, DefaultCategory_I_mid_high_rise_oriented_residential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_I_residential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Category_I_residential_zone", Category_I_residential_zone.class, DefaultCategory_I_residential_zone.class);
    }

    /**
     * Creates an instance of type Category_I_residential_zone.  Modifies the underlying ontology.
     */
    public Category_I_residential_zone createCategory_I_residential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_I_RESIDENTIAL_ZONE, DefaultCategory_I_residential_zone.class);
    }

    /**
     * Gets an instance of type Category_I_residential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Category_I_residential_zone getCategory_I_residential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CATEGORY_I_RESIDENTIAL_ZONE, DefaultCategory_I_residential_zone.class);
    }

    /**
     * Gets all instances of Category_I_residential_zone from the ontology.
     */
    public Collection<? extends Category_I_residential_zone> getAllCategory_I_residential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CATEGORY_I_RESIDENTIAL_ZONE, DefaultCategory_I_residential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Commercial_Area
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Commercial_Area", Commercial_Area.class, DefaultCommercial_Area.class);
    }

    /**
     * Creates an instance of type Commercial_Area.  Modifies the underlying ontology.
     */
    public Commercial_Area createCommercial_Area(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMERCIAL_AREA, DefaultCommercial_Area.class);
    }

    /**
     * Gets an instance of type Commercial_Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Commercial_Area getCommercial_Area(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMERCIAL_AREA, DefaultCommercial_Area.class);
    }

    /**
     * Gets all instances of Commercial_Area from the ontology.
     */
    public Collection<? extends Commercial_Area> getAllCommercial_AreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMERCIAL_AREA, DefaultCommercial_Area.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Commercial_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Commercial_zone", Commercial_zone.class, DefaultCommercial_zone.class);
    }

    /**
     * Creates an instance of type Commercial_zone.  Modifies the underlying ontology.
     */
    public Commercial_zone createCommercial_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMERCIAL_ZONE, DefaultCommercial_zone.class);
    }

    /**
     * Gets an instance of type Commercial_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Commercial_zone getCommercial_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMERCIAL_ZONE, DefaultCommercial_zone.class);
    }

    /**
     * Gets all instances of Commercial_zone from the ontology.
     */
    public Collection<? extends Commercial_zone> getAllCommercial_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMERCIAL_ZONE, DefaultCommercial_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Community_Center
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Community_Center", Community_Center.class, DefaultCommunity_Center.class);
    }

    /**
     * Creates an instance of type Community_Center.  Modifies the underlying ontology.
     */
    public Community_Center createCommunity_Center(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMMUNITY_CENTER, DefaultCommunity_Center.class);
    }

    /**
     * Gets an instance of type Community_Center with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Community_Center getCommunity_Center(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMMUNITY_CENTER, DefaultCommunity_Center.class);
    }

    /**
     * Gets all instances of Community_Center from the ontology.
     */
    public Collection<? extends Community_Center> getAllCommunity_CenterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMMUNITY_CENTER, DefaultCommunity_Center.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#DayCare
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#DayCare", DayCare.class, DefaultDayCare.class);
    }

    /**
     * Creates an instance of type DayCare.  Modifies the underlying ontology.
     */
    public DayCare createDayCare(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DAYCARE, DefaultDayCare.class);
    }

    /**
     * Gets an instance of type DayCare with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DayCare getDayCare(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DAYCARE, DefaultDayCare.class);
    }

    /**
     * Gets all instances of DayCare from the ontology.
     */
    public Collection<? extends DayCare> getAllDayCareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DAYCARE, DefaultDayCare.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Exclusively_industrial_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Exclusively_industrial_zone", Exclusively_industrial_zone.class, DefaultExclusively_industrial_zone.class);
    }

    /**
     * Creates an instance of type Exclusively_industrial_zone.  Modifies the underlying ontology.
     */
    public Exclusively_industrial_zone createExclusively_industrial_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXCLUSIVELY_INDUSTRIAL_ZONE, DefaultExclusively_industrial_zone.class);
    }

    /**
     * Gets an instance of type Exclusively_industrial_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Exclusively_industrial_zone getExclusively_industrial_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXCLUSIVELY_INDUSTRIAL_ZONE, DefaultExclusively_industrial_zone.class);
    }

    /**
     * Gets all instances of Exclusively_industrial_zone from the ontology.
     */
    public Collection<? extends Exclusively_industrial_zone> getAllExclusively_industrial_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXCLUSIVELY_INDUSTRIAL_ZONE, DefaultExclusively_industrial_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#ForestLand
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#ForestLand", ForestLand.class, DefaultForestLand.class);
    }

    /**
     * Creates an instance of type ForestLand.  Modifies the underlying ontology.
     */
    public ForestLand createForestLand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORESTLAND, DefaultForestLand.class);
    }

    /**
     * Gets an instance of type ForestLand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ForestLand getForestLand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORESTLAND, DefaultForestLand.class);
    }

    /**
     * Gets all instances of ForestLand from the ontology.
     */
    public Collection<? extends ForestLand> getAllForestLandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORESTLAND, DefaultForestLand.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Hospital
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Hospital", Hospital.class, DefaultHospital.class);
    }

    /**
     * Creates an instance of type Hospital.  Modifies the underlying ontology.
     */
    public Hospital createHospital(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOSPITAL, DefaultHospital.class);
    }

    /**
     * Gets an instance of type Hospital with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hospital getHospital(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOSPITAL, DefaultHospital.class);
    }

    /**
     * Gets all instances of Hospital from the ontology.
     */
    public Collection<? extends Hospital> getAllHospitalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOSPITAL, DefaultHospital.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Hotel
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Hotel", Hotel.class, DefaultHotel.class);
    }

    /**
     * Creates an instance of type Hotel.  Modifies the underlying ontology.
     */
    public Hotel createHotel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets an instance of type Hotel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Hotel getHotel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }

    /**
     * Gets all instances of Hotel from the ontology.
     */
    public Collection<? extends Hotel> getAllHotelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HOTEL, DefaultHotel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Industrial_Area
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Industrial_Area", Industrial_Area.class, DefaultIndustrial_Area.class);
    }

    /**
     * Creates an instance of type Industrial_Area.  Modifies the underlying ontology.
     */
    public Industrial_Area createIndustrial_Area(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INDUSTRIAL_AREA, DefaultIndustrial_Area.class);
    }

    /**
     * Gets an instance of type Industrial_Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Industrial_Area getIndustrial_Area(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INDUSTRIAL_AREA, DefaultIndustrial_Area.class);
    }

    /**
     * Gets all instances of Industrial_Area from the ontology.
     */
    public Collection<? extends Industrial_Area> getAllIndustrial_AreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INDUSTRIAL_AREA, DefaultIndustrial_Area.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Industrial_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Industrial_zone", Industrial_zone.class, DefaultIndustrial_zone.class);
    }

    /**
     * Creates an instance of type Industrial_zone.  Modifies the underlying ontology.
     */
    public Industrial_zone createIndustrial_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INDUSTRIAL_ZONE, DefaultIndustrial_zone.class);
    }

    /**
     * Gets an instance of type Industrial_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Industrial_zone getIndustrial_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INDUSTRIAL_ZONE, DefaultIndustrial_zone.class);
    }

    /**
     * Gets all instances of Industrial_zone from the ontology.
     */
    public Collection<? extends Industrial_zone> getAllIndustrial_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INDUSTRIAL_ZONE, DefaultIndustrial_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Kindergarten
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Kindergarten", Kindergarten.class, DefaultKindergarten.class);
    }

    /**
     * Creates an instance of type Kindergarten.  Modifies the underlying ontology.
     */
    public Kindergarten createKindergarten(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KINDERGARTEN, DefaultKindergarten.class);
    }

    /**
     * Gets an instance of type Kindergarten with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Kindergarten getKindergarten(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KINDERGARTEN, DefaultKindergarten.class);
    }

    /**
     * Gets all instances of Kindergarten from the ontology.
     */
    public Collection<? extends Kindergarten> getAllKindergartenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KINDERGARTEN, DefaultKindergarten.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#LandAndBuilding
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#LandAndBuilding", LandAndBuilding.class, DefaultLandAndBuilding.class);
    }

    /**
     * Creates an instance of type LandAndBuilding.  Modifies the underlying ontology.
     */
    public LandAndBuilding createLandAndBuilding(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LANDANDBUILDING, DefaultLandAndBuilding.class);
    }

    /**
     * Gets an instance of type LandAndBuilding with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LandAndBuilding getLandAndBuilding(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LANDANDBUILDING, DefaultLandAndBuilding.class);
    }

    /**
     * Gets all instances of LandAndBuilding from the ontology.
     */
    public Collection<? extends LandAndBuilding> getAllLandAndBuildingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LANDANDBUILDING, DefaultLandAndBuilding.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#LandOnly
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#LandOnly", LandOnly.class, DefaultLandOnly.class);
    }

    /**
     * Creates an instance of type LandOnly.  Modifies the underlying ontology.
     */
    public LandOnly createLandOnly(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LANDONLY, DefaultLandOnly.class);
    }

    /**
     * Gets an instance of type LandOnly with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LandOnly getLandOnly(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LANDONLY, DefaultLandOnly.class);
    }

    /**
     * Gets all instances of LandOnly from the ontology.
     */
    public Collection<? extends LandOnly> getAllLandOnlyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LANDONLY, DefaultLandOnly.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#LandUseZones
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#LandUseZones", LandUseZones.class, DefaultLandUseZones.class);
    }

    /**
     * Creates an instance of type LandUseZones.  Modifies the underlying ontology.
     */
    public LandUseZones createLandUseZones(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LANDUSEZONES, DefaultLandUseZones.class);
    }

    /**
     * Gets an instance of type LandUseZones with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LandUseZones getLandUseZones(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LANDUSEZONES, DefaultLandUseZones.class);
    }

    /**
     * Gets all instances of LandUseZones from the ontology.
     */
    public Collection<? extends LandUseZones> getAllLandUseZonesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LANDUSEZONES, DefaultLandUseZones.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Library
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Library", Library.class, DefaultLibrary.class);
    }

    /**
     * Creates an instance of type Library.  Modifies the underlying ontology.
     */
    public Library createLibrary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIBRARY, DefaultLibrary.class);
    }

    /**
     * Gets an instance of type Library with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Library getLibrary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIBRARY, DefaultLibrary.class);
    }

    /**
     * Gets all instances of Library from the ontology.
     */
    public Collection<? extends Library> getAllLibraryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIBRARY, DefaultLibrary.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Location
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Location", Location.class, DefaultLocation.class);
    }

    /**
     * Creates an instance of type Location.  Modifies the underlying ontology.
     */
    public Location createLocation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }

    /**
     * Gets an instance of type Location with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Location getLocation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }

    /**
     * Gets all instances of Location from the ontology.
     */
    public Collection<? extends Location> getAllLocationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATION, DefaultLocation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Neighborhood_commercial_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Neighborhood_commercial_zone", Neighborhood_commercial_zone.class, DefaultNeighborhood_commercial_zone.class);
    }

    /**
     * Creates an instance of type Neighborhood_commercial_zone.  Modifies the underlying ontology.
     */
    public Neighborhood_commercial_zone createNeighborhood_commercial_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEIGHBORHOOD_COMMERCIAL_ZONE, DefaultNeighborhood_commercial_zone.class);
    }

    /**
     * Gets an instance of type Neighborhood_commercial_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Neighborhood_commercial_zone getNeighborhood_commercial_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEIGHBORHOOD_COMMERCIAL_ZONE, DefaultNeighborhood_commercial_zone.class);
    }

    /**
     * Gets all instances of Neighborhood_commercial_zone from the ontology.
     */
    public Collection<? extends Neighborhood_commercial_zone> getAllNeighborhood_commercial_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEIGHBORHOOD_COMMERCIAL_ZONE, DefaultNeighborhood_commercial_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Office
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Office", Office.class, DefaultOffice.class);
    }

    /**
     * Creates an instance of type Office.  Modifies the underlying ontology.
     */
    public Office createOffice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OFFICE, DefaultOffice.class);
    }

    /**
     * Gets an instance of type Office with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Office getOffice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OFFICE, DefaultOffice.class);
    }

    /**
     * Gets all instances of Office from the ontology.
     */
    public Collection<? extends Office> getAllOfficeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OFFICE, DefaultOffice.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#POIs
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#POIs", POIs.class, DefaultPOIs.class);
    }

    /**
     * Creates an instance of type POIs.  Modifies the underlying ontology.
     */
    public POIs createPOIs(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POIS, DefaultPOIs.class);
    }

    /**
     * Gets an instance of type POIs with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public POIs getPOIs(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POIS, DefaultPOIs.class);
    }

    /**
     * Gets all instances of POIs from the ontology.
     */
    public Collection<? extends POIs> getAllPOIsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POIS, DefaultPOIs.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Potential_Residential_Area
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Potential_Residential_Area", Potential_Residential_Area.class, DefaultPotential_Residential_Area.class);
    }

    /**
     * Creates an instance of type Potential_Residential_Area.  Modifies the underlying ontology.
     */
    public Potential_Residential_Area createPotential_Residential_Area(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_POTENTIAL_RESIDENTIAL_AREA, DefaultPotential_Residential_Area.class);
    }

    /**
     * Gets an instance of type Potential_Residential_Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Potential_Residential_Area getPotential_Residential_Area(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_POTENTIAL_RESIDENTIAL_AREA, DefaultPotential_Residential_Area.class);
    }

    /**
     * Gets all instances of Potential_Residential_Area from the ontology.
     */
    public Collection<? extends Potential_Residential_Area> getAllPotential_Residential_AreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_POTENTIAL_RESIDENTIAL_AREA, DefaultPotential_Residential_Area.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Pre-owned_Condominiums
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Pre-owned_Condominiums", Pre_owned_Condominiums.class, DefaultPre_owned_Condominiums.class);
    }

    /**
     * Creates an instance of type Pre_owned_Condominiums.  Modifies the underlying ontology.
     */
    public Pre_owned_Condominiums createPre_owned_Condominiums(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRE_OWNED_CONDOMINIUMS, DefaultPre_owned_Condominiums.class);
    }

    /**
     * Gets an instance of type Pre_owned_Condominiums with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Pre_owned_Condominiums getPre_owned_Condominiums(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRE_OWNED_CONDOMINIUMS, DefaultPre_owned_Condominiums.class);
    }

    /**
     * Gets all instances of Pre_owned_Condominiums from the ontology.
     */
    public Collection<? extends Pre_owned_Condominiums> getAllPre_owned_CondominiumsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRE_OWNED_CONDOMINIUMS, DefaultPre_owned_Condominiums.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Prefecture
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Prefecture", Prefecture.class, DefaultPrefecture.class);
    }

    /**
     * Creates an instance of type Prefecture.  Modifies the underlying ontology.
     */
    public Prefecture createPrefecture(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PREFECTURE, DefaultPrefecture.class);
    }

    /**
     * Gets an instance of type Prefecture with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Prefecture getPrefecture(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PREFECTURE, DefaultPrefecture.class);
    }

    /**
     * Gets all instances of Prefecture from the ontology.
     */
    public Collection<? extends Prefecture> getAllPrefectureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PREFECTURE, DefaultPrefecture.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Quasiindustrial_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Quasiindustrial_zone", Quasiindustrial_zone.class, DefaultQuasiindustrial_zone.class);
    }

    /**
     * Creates an instance of type Quasiindustrial_zone.  Modifies the underlying ontology.
     */
    public Quasiindustrial_zone createQuasiindustrial_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUASIINDUSTRIAL_ZONE, DefaultQuasiindustrial_zone.class);
    }

    /**
     * Gets an instance of type Quasiindustrial_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Quasiindustrial_zone getQuasiindustrial_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUASIINDUSTRIAL_ZONE, DefaultQuasiindustrial_zone.class);
    }

    /**
     * Gets all instances of Quasiindustrial_zone from the ontology.
     */
    public Collection<? extends Quasiindustrial_zone> getAllQuasiindustrial_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUASIINDUSTRIAL_ZONE, DefaultQuasiindustrial_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Quasiresidential_zone
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Quasiresidential_zone", Quasiresidential_zone.class, DefaultQuasiresidential_zone.class);
    }

    /**
     * Creates an instance of type Quasiresidential_zone.  Modifies the underlying ontology.
     */
    public Quasiresidential_zone createQuasiresidential_zone(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUASIRESIDENTIAL_ZONE, DefaultQuasiresidential_zone.class);
    }

    /**
     * Gets an instance of type Quasiresidential_zone with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Quasiresidential_zone getQuasiresidential_zone(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUASIRESIDENTIAL_ZONE, DefaultQuasiresidential_zone.class);
    }

    /**
     * Gets all instances of Quasiresidential_zone from the ontology.
     */
    public Collection<? extends Quasiresidential_zone> getAllQuasiresidential_zoneInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUASIRESIDENTIAL_ZONE, DefaultQuasiresidential_zone.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#RealEstate
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#RealEstate", RealEstate.class, DefaultRealEstate.class);
    }

    /**
     * Creates an instance of type RealEstate.  Modifies the underlying ontology.
     */
    public RealEstate createRealEstate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REALESTATE, DefaultRealEstate.class);
    }

    /**
     * Gets an instance of type RealEstate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RealEstate getRealEstate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REALESTATE, DefaultRealEstate.class);
    }

    /**
     * Gets all instances of RealEstate from the ontology.
     */
    public Collection<? extends RealEstate> getAllRealEstateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REALESTATE, DefaultRealEstate.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#ResidentialLand
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#ResidentialLand", ResidentialLand.class, DefaultResidentialLand.class);
    }

    /**
     * Creates an instance of type ResidentialLand.  Modifies the underlying ontology.
     */
    public ResidentialLand createResidentialLand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESIDENTIALLAND, DefaultResidentialLand.class);
    }

    /**
     * Gets an instance of type ResidentialLand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ResidentialLand getResidentialLand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESIDENTIALLAND, DefaultResidentialLand.class);
    }

    /**
     * Gets all instances of ResidentialLand from the ontology.
     */
    public Collection<? extends ResidentialLand> getAllResidentialLandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESIDENTIALLAND, DefaultResidentialLand.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Residential_Area
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Residential_Area", Residential_Area.class, DefaultResidential_Area.class);
    }

    /**
     * Creates an instance of type Residential_Area.  Modifies the underlying ontology.
     */
    public Residential_Area createResidential_Area(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESIDENTIAL_AREA, DefaultResidential_Area.class);
    }

    /**
     * Gets an instance of type Residential_Area with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Residential_Area getResidential_Area(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESIDENTIAL_AREA, DefaultResidential_Area.class);
    }

    /**
     * Gets all instances of Residential_Area from the ontology.
     */
    public Collection<? extends Residential_Area> getAllResidential_AreaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESIDENTIAL_AREA, DefaultResidential_Area.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Restaurant
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Restaurant", Restaurant.class, DefaultRestaurant.class);
    }

    /**
     * Creates an instance of type Restaurant.  Modifies the underlying ontology.
     */
    public Restaurant createRestaurant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESTAURANT, DefaultRestaurant.class);
    }

    /**
     * Gets an instance of type Restaurant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Restaurant getRestaurant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESTAURANT, DefaultRestaurant.class);
    }

    /**
     * Gets all instances of Restaurant from the ontology.
     */
    public Collection<? extends Restaurant> getAllRestaurantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESTAURANT, DefaultRestaurant.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#School
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#School", School.class, DefaultSchool.class);
    }

    /**
     * Creates an instance of type School.  Modifies the underlying ontology.
     */
    public School createSchool(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHOOL, DefaultSchool.class);
    }

    /**
     * Gets an instance of type School with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public School getSchool(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHOOL, DefaultSchool.class);
    }

    /**
     * Gets all instances of School from the ontology.
     */
    public Collection<? extends School> getAllSchoolInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHOOL, DefaultSchool.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Shopping_Center
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Shopping_Center", Shopping_Center.class, DefaultShopping_Center.class);
    }

    /**
     * Creates an instance of type Shopping_Center.  Modifies the underlying ontology.
     */
    public Shopping_Center createShopping_Center(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SHOPPING_CENTER, DefaultShopping_Center.class);
    }

    /**
     * Gets an instance of type Shopping_Center with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Shopping_Center getShopping_Center(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SHOPPING_CENTER, DefaultShopping_Center.class);
    }

    /**
     * Gets all instances of Shopping_Center from the ontology.
     */
    public Collection<? extends Shopping_Center> getAllShopping_CenterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SHOPPING_CENTER, DefaultShopping_Center.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Station
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Station", Station.class, DefaultStation.class);
    }

    /**
     * Creates an instance of type Station.  Modifies the underlying ontology.
     */
    public Station createStation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATION, DefaultStation.class);
    }

    /**
     * Gets an instance of type Station with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Station getStation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATION, DefaultStation.class);
    }

    /**
     * Gets all instances of Station from the ontology.
     */
    public Collection<? extends Station> getAllStationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATION, DefaultStation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Transaction
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#Transaction", Transaction.class, DefaultTransaction.class);
    }

    /**
     * Creates an instance of type Transaction.  Modifies the underlying ontology.
     */
    public Transaction createTransaction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSACTION, DefaultTransaction.class);
    }

    /**
     * Gets an instance of type Transaction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Transaction getTransaction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSACTION, DefaultTransaction.class);
    }

    /**
     * Gets all instances of Transaction from the ontology.
     */
    public Collection<? extends Transaction> getAllTransactionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSACTION, DefaultTransaction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#University
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#University", University.class, DefaultUniversity.class);
    }

    /**
     * Creates an instance of type University.  Modifies the underlying ontology.
     */
    public University createUniversity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNIVERSITY, DefaultUniversity.class);
    }

    /**
     * Gets an instance of type University with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public University getUniversity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNIVERSITY, DefaultUniversity.class);
    }

    /**
     * Gets all instances of University from the ontology.
     */
    public Collection<? extends University> getAllUniversityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNIVERSITY, DefaultUniversity.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#regionOfRealEstate
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#regionOfRealEstate", RegionOfRealEstate.class, DefaultRegionOfRealEstate.class);
    }

    /**
     * Creates an instance of type RegionOfRealEstate.  Modifies the underlying ontology.
     */
    public RegionOfRealEstate createRegionOfRealEstate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REGIONOFREALESTATE, DefaultRegionOfRealEstate.class);
    }

    /**
     * Gets an instance of type RegionOfRealEstate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RegionOfRealEstate getRegionOfRealEstate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REGIONOFREALESTATE, DefaultRegionOfRealEstate.class);
    }

    /**
     * Gets all instances of RegionOfRealEstate from the ontology.
     */
    public Collection<? extends RegionOfRealEstate> getAllRegionOfRealEstateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REGIONOFREALESTATE, DefaultRegionOfRealEstate.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#typeOfRealEstate
     */

    {
        javaMapping.add("http://www.semanticweb.org/nurulfirdaus/ontologies/2017/11/realestate#typeOfRealEstate", TypeOfRealEstate.class, DefaultTypeOfRealEstate.class);
    }

    /**
     * Creates an instance of type TypeOfRealEstate.  Modifies the underlying ontology.
     */
    public TypeOfRealEstate createTypeOfRealEstate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TYPEOFREALESTATE, DefaultTypeOfRealEstate.class);
    }

    /**
     * Gets an instance of type TypeOfRealEstate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TypeOfRealEstate getTypeOfRealEstate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TYPEOFREALESTATE, DefaultTypeOfRealEstate.class);
    }

    /**
     * Gets all instances of TypeOfRealEstate from the ontology.
     */
    public Collection<? extends TypeOfRealEstate> getAllTypeOfRealEstateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TYPEOFREALESTATE, DefaultTypeOfRealEstate.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2006/time#DistanceToStation
     */

    {
        javaMapping.add("http://www.w3.org/2006/time#DistanceToStation", DistanceToStation.class, DefaultDistanceToStation.class);
    }

    /**
     * Creates an instance of type DistanceToStation.  Modifies the underlying ontology.
     */
    public DistanceToStation createDistanceToStation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISTANCETOSTATION, DefaultDistanceToStation.class);
    }

    /**
     * Gets an instance of type DistanceToStation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DistanceToStation getDistanceToStation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISTANCETOSTATION, DefaultDistanceToStation.class);
    }

    /**
     * Gets all instances of DistanceToStation from the ontology.
     */
    public Collection<? extends DistanceToStation> getAllDistanceToStationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISTANCETOSTATION, DefaultDistanceToStation.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2006/time#TemporalPosition
     */

    {
        javaMapping.add("http://www.w3.org/2006/time#TemporalPosition", Temporal_position.class, DefaultTemporal_position.class);
    }

    /**
     * Creates an instance of type Temporal_position.  Modifies the underlying ontology.
     */
    public Temporal_position createTemporal_position(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_POSITION, DefaultTemporal_position.class);
    }

    /**
     * Gets an instance of type Temporal_position with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temporal_position getTemporal_position(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_POSITION, DefaultTemporal_position.class);
    }

    /**
     * Gets all instances of Temporal_position from the ontology.
     */
    public Collection<? extends Temporal_position> getAllTemporal_positionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORAL_POSITION, DefaultTemporal_position.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2006/time#TransactionPeriod
     */

    {
        javaMapping.add("http://www.w3.org/2006/time#TransactionPeriod", TransactionPeriod.class, DefaultTransactionPeriod.class);
    }

    /**
     * Creates an instance of type TransactionPeriod.  Modifies the underlying ontology.
     */
    public TransactionPeriod createTransactionPeriod(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSACTIONPERIOD, DefaultTransactionPeriod.class);
    }

    /**
     * Gets an instance of type TransactionPeriod with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TransactionPeriod getTransactionPeriod(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSACTIONPERIOD, DefaultTransactionPeriod.class);
    }

    /**
     * Gets all instances of TransactionPeriod from the ontology.
     */
    public Collection<? extends TransactionPeriod> getAllTransactionPeriodInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSACTIONPERIOD, DefaultTransactionPeriod.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2006/time#TransactionPrice
     */

    {
        javaMapping.add("http://www.w3.org/2006/time#TransactionPrice", TransactionPrice.class, DefaultTransactionPrice.class);
    }

    /**
     * Creates an instance of type TransactionPrice.  Modifies the underlying ontology.
     */
    public TransactionPrice createTransactionPrice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSACTIONPRICE, DefaultTransactionPrice.class);
    }

    /**
     * Gets an instance of type TransactionPrice with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TransactionPrice getTransactionPrice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSACTIONPRICE, DefaultTransactionPrice.class);
    }

    /**
     * Gets all instances of TransactionPrice from the ontology.
     */
    public Collection<? extends TransactionPrice> getAllTransactionPriceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSACTIONPRICE, DefaultTransactionPrice.class);
    }


}
