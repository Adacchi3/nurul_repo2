package servlet.impl;

import servlet.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultTemporal_position <br>
 * @version generated on Thu Jun 21 13:30:55 JST 2018 by nurulfirdaus
 */
public class DefaultTemporal_position extends WrappedIndividualImpl implements Temporal_position {

    public DefaultTemporal_position(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.w3.org/2006/time#dayOfWeek
     */
     
    public Collection<? extends WrappedIndividual> getDay_of_week() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_DAY_OF_WEEK,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasDay_of_week() {
	   return !getDay_of_week().isEmpty();
    }

    public void addDay_of_week(WrappedIndividual newDay_of_week) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_DAY_OF_WEEK,
                                       newDay_of_week);
    }

    public void removeDay_of_week(WrappedIndividual oldDay_of_week) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_DAY_OF_WEEK,
                                          oldDay_of_week);
    }


    /* ***************************************************
     * Object Property http://www.w3.org/2006/time#timeZone
     */
     
    public Collection<? extends WrappedIndividual> getIn_time_zone() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IN_TIME_ZONE,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIn_time_zone() {
	   return !getIn_time_zone().isEmpty();
    }

    public void addIn_time_zone(WrappedIndividual newIn_time_zone) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IN_TIME_ZONE,
                                       newIn_time_zone);
    }

    public void removeIn_time_zone(WrappedIndividual oldIn_time_zone) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IN_TIME_ZONE,
                                          oldIn_time_zone);
    }


}
